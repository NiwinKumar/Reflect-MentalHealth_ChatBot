{"version":3,"sources":["components/dialogues/ConsentForm.js","components/chat/ChatMessages.js","actions/messageActions.js","actions/types.js","components/chat/ChatInput.js","components/chat/ChatPanel.js","reducers/messageReducer.js","reducers/sessionIDReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["ConsentForm","handleClose","show","Modal","size","aria-labelledby","onHide","backdrop","centered","Header","Title","id","Body","Footer","Button","onClick","ChatMessages","this","props","fetchMessages","Fragment","style","margin","float","className","messages","map","msg","key","sender","receiver","message","Component","connect","state","dispatch","type","payload","ChatInput","onChange","e","setState","target","name","value","sendMessage","rasaMsg","user","onKeyPress","event","sessionID","msgData","axios","post","then","res","msgText","data","newMsg","text","userMsg","botMsg","catch","err","console","log","ChatPanel","initialState","item","numMsgs","Date","now","combineReducers","action","items","num","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","showConsentForm","closeConsentForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2213710.chunk.js","sourcesContent":["import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ConsentForm = ({ handleClose, show }) => {\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            onHide={handleClose}\r\n            backdrop='static'\r\n            centered\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Reflection Chatbot Consent Form\r\n        </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>\r\n                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n                    dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\r\n                    consectetur ac, vestibulum at eros.\r\n        </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={handleClose}>I Agree</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConsentForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchMessages } from '../../actions/messageActions';\r\n\r\nclass ChatMessages extends Component {\r\n    componentWillMount() {\r\n        this.props.fetchMessages();\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h2 style={{margin:\"10px auto\", float:\"left\"}}>Chat Messages</h2>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Sender</th>\r\n                            <th>Receiver</th>\r\n                            <th>Message</th>\r\n                            <th />\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.props.messages.map(msg => (\r\n                            <tr key={msg.id}>\r\n                                <td>{msg.id}</td>\r\n                                <td>{msg.sender}</td>\r\n                                <td>{msg.receiver}</td>\r\n                                <td>{msg.message}</td>\r\n                                <td>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nChatMessages.propTypes = {\r\n    fetchMessages: PropTypes.func.isRequired,\r\n    messages: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    messages: state.messages.messages\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchMessages })(ChatMessages);","import { FETCH_MESSAGES, SEND_MESSAGE } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const fetchMessages = () => dispatch => {\r\n    // fetch('https://jsonplaceholder.typicode.com/posts')\r\n    //     .then(res => res.json())\r\n    //     .then(messages =>\r\n    //         dispatch({\r\n    //             type: FETCH_MESSAGES,\r\n    //             payload: messages\r\n    //         })\r\n    //     );\r\n    dispatch({\r\n        type: FETCH_MESSAGES,\r\n        payload: null\r\n    });\r\n};\r\n\r\nexport const sendMessage = (msgData) => dispatch => {\r\n    // Actually posts to http://localhost:5005/webhooks... but we used ngrok to make it accessible via website\r\n    axios.post('https://ba85e1fd.ngrok.io/webhooks/rest/webhook', msgData)\r\n        .then(res => {\r\n            let msgText = \"\";\r\n            res.data.map((newMsg) => {\r\n                msgText = msgText + newMsg.text + '\\n';\r\n                return msgText;\r\n            });\r\n            let userMsg = {sender: msgData.sender, receiver: 'Bot', message: msgData.message};\r\n            let botMsg = {sender: 'Bot', receiver: msgData.sender, message: msgText};\r\n\r\n            dispatch({\r\n                type: SEND_MESSAGE,\r\n                userMsg: userMsg,\r\n                botMsg: botMsg\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};","export const FETCH_MESSAGES = 'FETCH_MESSAGES';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../../actions/messageActions';\r\n\r\nclass ChatInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //TODO: Must replace User with unique id\r\n        this.state = {\r\n            receiver: 'Bot',\r\n            message: ''\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    sendMessage = () => {\r\n        const {receiver, message } = this.state;\r\n        let sender = this.props.user;\r\n        const rasaMsg = { sender, receiver, message };\r\n        //Send message to rasa and get chatbot response\r\n        this.props.sendMessage(rasaMsg);\r\n        this.setState({message:''});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h2>User Input textbox</h2>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"message\"\r\n                    onChange={this.onChange}\r\n                    value={this.state.message}\r\n                    onKeyPress={event => {\r\n                        if (event.key === 'Enter') {\r\n                            this.sendMessage();\r\n                        };\r\n                    }}\r\n                />\r\n                <button onClick={this.sendMessage} className=\"btn btn-primary\">Submit</button>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nChatInput.propTypes = {\r\n    sendMessage: PropTypes.func.isRequired,\r\n    user: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.sessionID.sessionID // Get unique session id to use for user each time page is loaded.\r\n})\r\n\r\nexport default connect(mapStateToProps, { sendMessage })(ChatInput);","import React from 'react';\r\nimport ChatMessages from './ChatMessages';\r\nimport ChatInput from './ChatInput';\r\n\r\nexport default function ChatPanel() {\r\n    return (\r\n        <React.Fragment>\r\n            <ChatMessages />\r\n            <ChatInput/>\r\n        </React.Fragment>\r\n    )\r\n}","import { FETCH_MESSAGES, SEND_MESSAGE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    messages: [{id:1, sender:'Bot', receiver:'User', message:'Say hello to begin'}],\r\n    item: {},\r\n    numMsgs: 1\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_MESSAGES:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case SEND_MESSAGE:\r\n                let num = state.numMsgs;\r\n                return {\r\n                    ...state,\r\n                    numMsgs: state.numMsgs+2,\r\n                    messages: [...state.messages, {...action.userMsg, id: num+1}, {...action.botMsg, id: num+2}]\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n}","let sessID = 'u_'+Date.now();\r\nconst initialState = {\r\n    sessionID: sessID\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport messageReducer from './messageReducer';\r\nimport sessionIDReducer from './sessionIDReducer';\r\n\r\nexport default combineReducers({\r\n    messages: messageReducer,\r\n    sessionID: sessionIDReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(\r\n        applyMiddleware(...middleware)\r\n    )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport ConsentForm from './components/dialogues/ConsentForm';\nimport ChatPanel from './components/chat/ChatPanel';\n\nimport store from './store';\n\nclass App extends Component {\n  state = {showConsentForm: true};\n\n  closeConsentForm = () => {\n    this.setState({ showConsentForm: false});\n  };\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            \n          </header>\n          <ConsentForm show={this.state.showConsentForm} handleClose={this.closeConsentForm} />\n          <ChatPanel />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}